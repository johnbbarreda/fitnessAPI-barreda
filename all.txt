controllers/UserController.js:
const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

// Register User
exports.registerUser = async (req, res) => {
    const { email, password } = req.body;
    const hashedPassword = await bcrypt.hash(password, 10);
    
    const user = new User({ email, password: hashedPassword });
    
    try {
        await user.save();
        res.status(201).json({ message: 'User registered successfully.' });
    } catch (error) {
        res.status(400).json({ error: 'Email already exists.' });
    }
};

// Login User
exports.loginUser = async (req, res) => {
    const { email, password } = req.body;
    
    const user = await User.findOne({ email });
    
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ error: 'Invalid credentials.' });
    }
    
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET);
    res.json({ token });
};

controllers/WorkoutController.js:
const Workout = require('../models/Workout');

// Add Workout
exports.addWorkout = async (req, res) => {
    const { name, duration } = req.body;
    
    const workout = new Workout({ name, duration, userId: req.userId });
    
    try {
        await workout.save();
        res.status(201).json(workout);
    } catch (error) {
        res.status(400).json({ error: 'Error adding workout.' });
    }
};

// Get My Workouts
exports.getMyWorkouts = async (req, res) => {
    const workouts = await Workout.find({ userId: req.userId });
    res.json(workouts);
};

// Update Workout
exports.updateWorkout = async (req, res) => {
    const { id } = req.params;
    
    try {
        const workout = await Workout.findOneAndUpdate(
            { _id: id, userId: req.userId },
            req.body,
            { new: true }
        );
        
        if (!workout) return res.sendStatus(404);
        
        res.json(workout);
    } catch (error) {
        res.status(400).json({ error: 'Error updating workout.' });
    }
};

// Delete Workout
exports.deleteWorkout = async (req, res) => {
    const { id } = req.params;
    
    try {
        const workout = await Workout.findOneAndDelete({ _id: id, userId: req.userId });
        
        if (!workout) return res.sendStatus(404);
        
        res.sendStatus(204);
    } catch (error) {
        res.status(400).json({ error: 'Error deleting workout.' });
    }
};

// Complete Workout Status
exports.completeWorkoutStatus = async (req, res) => {
    const { id } = req.params;
    
    try {
        const workout = await Workout.findOneAndUpdate(
            { _id: id, userId: req.userId },
            { status: 'completed' },
            { new: true }
        );
        
        if (!workout) return res.sendStatus(404);
        
        res.json(workout);
    } catch (error) {
        res.status(400).json({ error: 'Error updating workout status.' });
    }
};

middleware/auth.js:
const jwt = require('jsonwebtoken');

const authenticateToken = (req, res, next) => {
    const token = req.headers['authorization']?.split(' ')[1];
    
    if (!token) return res.sendStatus(401);
    
    jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
        if (err) return res.sendStatus(403);
        req.userId = user.id; // Attach the user ID to the request object for later use.
        next();
    });
};

module.exports = authenticateToken;

middleware/errorHandler.js:
class AppError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
        this.isOperational = true; // Indicates whether this is an operational error or a programming error.
        
        Error.captureStackTrace(this, this.constructor); // Capture stack trace for debugging.
    }
}

const handleError = (err, req, res, next) => {
    if (err instanceof AppError) {
        return res.status(err.statusCode).json({
            status: 'error',
            message: err.message,
        });
    }

    // Handle other errors (programming errors)
    console.error(err); // Log the error for debugging.

    return res.status(500).json({
        status: 'error',
        message: 'Something went wrong!',
    });
};

module.exports = { AppError, handleError };

models/User.js:
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
});

module.exports = mongoose.model('User', userSchema);

models/Workout.js:
const mongoose = require('mongoose');

const workoutSchema = new mongoose.Schema({
    name: { type: String, required: true },
    duration: { type: Number, required: true }, // duration in minutes
    dateAdded: { type: Date, default: Date.now },
    status: { type: String, enum: ['completed', 'pending'], default: 'pending' },
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' }
});

module.exports = mongoose.model('Workout', workoutSchema);

routes/userRoutes.js:
const express = require('express');
const { registerUser, loginUser } = require('../controllers/UserController');

const router = express.Router();

// User Routes
router.post('/register', registerUser);
router.post('/login', loginUser);

module.exports = router;

routes/workoutRoutes.js:
const express = require('express');
const {
    addWorkout,
    getMyWorkouts,
    updateWorkout,
    deleteWorkout,
    completeWorkoutStatus,
} = require('../controllers/WorkoutController');
const authenticateToken = require('../middleware/auth');

const router = express.Router();

// Workout Routes
router.post('/addWorkout', authenticateToken, addWorkout);
router.get('/getMyWorkouts', authenticateToken, getMyWorkouts);
router.put('/updateWorkout/:id', authenticateToken, updateWorkout);
router.delete('/deleteWorkout/:id', authenticateToken, deleteWorkout);
router.put('/completeWorkoutStatus/:id', authenticateToken, completeWorkoutStatus);

module.exports = router;

App.js:
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const userRoutes = require('./routes/userRoutes');
const workoutRoutes = require('./routes/workoutRoutes');
const { handleError } = require('./middleware/errorHandler');

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

mongoose.connect(process.env.MONGODB_URI)
.then(() => console.log("MongoDB connected"))
.catch(err => console.error(err));

// Routes
app.use('/', userRoutes);
app.use('/', workoutRoutes);

// Global Error Handling Middleware
app.use(handleError);

module.exports = app; // Export the app instance for use in index.js

index.js:
const App = require('./App');

// Start the application
const PORT = process.env.PORT || 5000;
App.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});
